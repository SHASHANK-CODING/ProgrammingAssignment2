## Write a short comment describing this function
library(MASS)
## Write a short comment describing this function
library(MASS)
int <- NULL
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
}
set<-function(y){
}
inver%*%x}
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
inv
## Write a short comment describing this function
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-$get()
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
## Write a short comment describing this function
library(MASS)
## Write a short comment describing this function
library(MASS)
library(MASS)
library(MASS)
source("C:/Users/91893/Desktop/ProgrammingAssignment2/cachematrix.R")
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get
setinv = setinv,
list(set = set,get = get
setinv = setinv,
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-$get()
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-x$get()
int<-solve(data,...)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-x$get()
int<-solve(data,...)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-x$get()
int<-solve(data,...)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
int <- NULL
set<-function(y){
x<<-y
int<<-NULL
}
get<-function()x
setinv<-function(inverse)int<<-inverse
getinv<-function() {
inver<-ginv(x)
inver%*%x
}
list(set = set,get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)) {
message("getting catched data!")
return(inv)
}
data<-x$get()
int<-solve(data,...)
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
install.packages("MASS")
